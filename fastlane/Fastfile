# # This file contains the fastlane.tools configuration
# # You can find the documentation at https://docs.fastlane.tools
# #
# # For a list of all available actions, check out
# #
# #     https://docs.fastlane.tools/actions
# #
# # For a list of all available plugins, check out
# #
# #     https://docs.fastlane.tools/plugins/available-plugins
# #

# # Uncomment the line if you want fastlane to automatically update itself
# # update_fastlane
# default_platform(:ios)
# skip_docs

# # iOS build - Fill below configuration input as per your project need and replace dummy inputs with actual one.
# # For more information on build settings , see:
# # https://docs.fastlane.tools/actions/build_app/#build_app
# workspace = "MVVMCleanCodeSwiftUI.xcworkspace"

# # The configuration to use when building the app. Defaults to 'Release'
# clean_build = "false"

# # Method used to export the archive. 
# # Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id
# export_method = "ad-hoc"

# # Unit test case
# test_scheme = "MVVMCleanCodeSwiftUITests"

# # Project directory
# project_directory = ENV["PWD"] + "/reports/"


# desc "Runs all the Unit Tests"
# lane :tests do
#   # Publish Mac Notification
#  # notification(subtitle: "Lane Executing Test Cases", message: "Test Cases!")
# # Check if reports folder exists
# # This step is optional - if you want to keep all reports like test cases, coverage, docs etc under a specific folder.
#             sh(" if [ ! -d #{project_directory} ] 
#             then
#                 mkdir #{project_directory}
#             fi ")
# # Run tests
#      scan(scheme: test_scheme,
#           only_testing: "MVVMCleanCodeSwiftUITests/",
#           workspace: workspace,
#           device: "iPhone 14",
#           clean: false
#         )
# end

# desc "Does a static analysis of the project. Configure the options in .swiftlint.yml"
# lane :lint do
#   puts "Linting..."
#   swiftlint(
#     mode: :lint,
#     output_file: "reports/swiftlint.xml",
#     reporter: "checkstyle",
#     config_file: ".swiftlint.yml",
#     ignore_exit_status: true
#   )
# end

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
default_platform(:ios)
skip_docs

# iOS build - Fill below configuration input as per your project need and replace dummy inputs with actual one.
# For more information on build settings , see:
# https://docs.fastlane.tools/actions/build_app/#build_app
app_name = "MVVMCleanCodeSwiftUI"
scheme = "MVVMCleanCodeSwiftUIStaging"
project = "MVVMCleanCodeSwiftUI.xcodeproj"
workspace = "MVVMCleanCodeSwiftUI.xcworkspace"
target = "MVVMCleanCodeSwiftUI"
bundle_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

# The configuration to use when building the app. Defaults to 'Release'
build_config = "Staging"
clean_build = "false"

# Method used to export the archive. 
# Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id
export_method = "ad-hoc"

# Code signing identities
codesign_certificate = "iPhone Distribution: Kevin Vishal (UQN7GH636G)"
provisioning_profile = "NewsUncleAdhocDistribution"

# Unit test case
test_scheme = "MVVMCleanCodeSwiftUITests"

# Upload/Distribution
distribution = "testflight"
groups = "News_App_UAT_Testers"

# For firebase/testfairy/appcenter etc
api_key = "DISTRIBUTION_API_TOKEN"

# Push changes
remote_branch = "feature/CICD_Integration"
release_notes = "MVVMCleanCodeSwiftUI v1.0.0 Release\nTest build from automated CI-CD"

# Publish build
channel = "teams"
webhook_url = "https://tavant.webhook.office.com/webhookb2/af7f57ee-5c6f-44b5-b3eb-7fe8ee60fb97@c6c1e9da-5d0c-4f8f-9a02-3c67206efbd6/IncomingWebhook/7c20cb13aaad428aae3a27a84ba02364/a9c17891-39d7-4ce6-8f3f-776e88ca3af6"

# Output build path
output_directory_path = ENV["PWD"] + "/build/"

# Project directory
project_directory = ENV["PWD"] + "/reports/"
# Output build name
output_build_name = ""


# before_all do
#   #xcversion(version: "~> 14.2.0") if is_ci # Selects the latest installed version from the 14.2.x set
#   xcodes(
#     version: '14',
#     select_for_current_build_only: true,
#   )
# end
desc "Get certificates"
lane :certificates do
  sync_code_signing(
    type: "adhoc",
    app_identifier: ['com.tuffytiffany.newsuncle'],
    force_for_new_devices: true,
    readonly: true
  )

  # You can repeate the sync_code_signing with other types of certificates such as appstore and adhoc
  sync_code_signing(
    type: "adhoc",
    app_identifier: 'com.tuffytiffany.newsuncle',
    readonly: true
  )
end

desc "Runs all the Unit Tests"
lane :tests do
  # Publish Mac Notification
 # notification(subtitle: "Lane Executing Test Cases", message: "Test Cases!")
# Check if reports folder exists
# This step is optional - if you want to keep all reports like test cases, coverage, docs etc under a specific folder.
            sh(" if [ ! -d #{project_directory} ] 
            then
                mkdir #{project_directory}
            fi ")
# Run tests
  # run_tests(clean: true,
  #           fail_build: false,
  #           scheme: test_scheme,
  #           code_coverage: true,
  #           device: "iPhone 14",
  #           output_types: "html,junit",
  #           output_directory: "reports/")
     scan(scheme: test_scheme,
          only_testing: "MVVMCleanCodeSwiftUITests/",
          workspace: workspace,
          device: "iPhone 14",
          clean: false
        )
end

desc "Does a static analysis of the project. Configure the options in .swiftlint.yml"
lane :lint do
  puts "Linting..."
  swiftlint(
    mode: :lint,
    output_file: "reports/swiftlint.xml",
    reporter: "checkstyle",
    config_file: ".swiftlint.yml",
    ignore_exit_status: true
  )
end

desc "This lane initiates the build process. Takes argument(options) as app_build_name"
  lane :build do |options|
    puts "build process started..."
 # Options passed by user
    puts options
# xcode version
  #  xcversion(version: "~> 14.2.0")
 #   xcode_select("/Applications/Xcode-14.2.app")
# Ensure that the git status is clean and no megre head or un-commited code exists
 #   ensure_git_status_clean
# Increment build number
    updated_build_num = increment_build_number(xcodeproj: project)
# Commit the version bump
   # commit_version_bump(xcodeproj: project)
# Compile bitcode is hardcoded here, if required can be made configurable by moving to global variables list
    compile_bitcode = false 
    puts "compile_bitcode: #{compile_bitcode}"
    
    args = {  scheme: scheme,
              clean: clean_build,
              export_method: export_method,
              configuration: build_config,  
              include_bitcode: false,
              export_options: ({
                compileBitcode: compile_bitcode,
                provisioningProfiles: {
                  bundle_identifier => provisioning_profile
                }
              }),
              codesigning_identity: codesign_certificate,
              output_directory: output_directory_path,
              output_name: options[:app_build_name],
           }
if workspace
            args[:workspace] = workspace
          else
            args[:project] = project
          end
# Fastlane build action to trigger build with required args
# build_app(args)
 
## Uncomment below lanes if you like to execute all with one command in the sequence defined below
# MVVMCleanCodeSwiftUI_Test_v1 will be name of the result app
# Say we run "fastlane build app_build_name:MVVMCleanCodeSwiftUI_Test_v1"
# Execution Sequence: Run Test->Linting->Code->Build->Upload/Publish
  #tests
  #lint
  certificates
  build_app(args)
  #upload
  end

desc "This lane will upload build to the respective distribution opted for"
  lane :upload do |options|
output_build_name = options[:app_build_name]
        
    #Release notes - If empty will show last git commits in the notes
    if release_notes.empty?
      # Fetch changelog from Git repo
      release_notes = changelog_from_git_commits(
                          commits_count: "10",
                          pretty: "- (%ae) %s",
                          date_format: "short",
                          match_lightweight_tag: false, 
                          merge_commit_filtering: "exclude_merges")
    end
    puts "APP DISTRIBUTION : #{distribution}"
# Publish to the channel
#    publish(build_name: output_build_name, version_num: get_version_number(xcodeproj: project))
# Select upload option as per user selection
    case distribution
    when 'testfairy' 
        # Push build on to TestFairy 
        testfairy(api_key: api_key,
                    ipa: output_directory_path + output_build_name + ".ipa",
                    symbols_file: output_directory_path + output_build_name + ".app.dSYM.zip",
                    comment: release_notes,
                    testers_groups: groups,
                    notify: "on")
when 'testflight'
        # Push build on to TestFlight
        upload_to_testflight(
                    username: CredentialsManager::AppfileConfig.try_fetch_value(:apple_id),
                    app_identifier: bundle_identifier,
                    ipa: lane_context[SharedValues::IPA_OUTPUT_PATH],
                  skip_submission: true,
                  skip_waiting_for_build_processing: true,
                    groups: groups,
                    changelog: release_notes)
when 'appcenter'
        desc "This lane will upload build on AppCenter"
        appcenter_upload(
                  api_token: api_key,
                  owner_name: "MVVMCleanCodeSwiftUIOwner",
                  app_name: app_name,
                  file: lane_context[SharedValues::IPA_OUTPUT_PATH],
                  dsym: lane_context[SharedValues::DSYM_OUTPUT_PATH],
                  release_notes: release_notes,
                  notify_testers: true
        )
when 'firebase'
        firebase_app_distribution(
                    app: api_key,
                    ipa_path: output_directory_path + output_build_name + ".ipa",
                    groups: groups,
                    release_notes: release_notes
        )
else
        # No channel opted for notifing build release
        puts "No distribution opted to upload app"
end


desc "This lane will publish build information to respective channels "
  lane :publish do |options|
# Push the commit to remote branch
    current_time = Time.new.strftime('%Y.%m.%d_%H.%M')
# Facts for the build that need to be published on Teams channel
        build_details = [
          {
            "name"=>"Build Name",
            "value"=>options[:build_name]
          },
          {
            "name"=>"Version Number",
            "value"=>options[:version_num]
          },
          {
            "name"=>"Published Date / Time",
            "value"=>current_time
          }
        ]
      puts "CHANNEL : #{channel}"
case channel
    when 'teams' 
    puts "Notifying in Teams.."
    # Publish build available notification on iOS Team channel
    teams(title: "New Build Available",
   message: app_name + " App successfully released!! Please download it on device to start testing.",
          facts: build_details,
          teams_url: webhook_url)
when 'slack'
    puts "Notifying in Slack.."
    slack(message: app_name + " App successfully released!! Please download it on device to start testing.",
            slack_url: webhook_url,
            fields: build_details)
    else
    # No channel opted for notifing build release
    puts "No channel specified"
   end
  end
  
end

# desc "This lane will commit version bump and push changes to remote "
#   lane :push_to_remote do
# # Push the commit to remote branch
#     # simple version. pushes "master" branch to "origin" remote
#     push_to_git_remote(remote: "origin", 
#                        local_branch: "HEAD",  
#                        remote_branch: remote_branch, 
#                        force: true, 
#                        tags: true)
#   end

platform :ios do
  desc "Description of what the lane does"
  lane :custom_lane do
    # add actions here: https://docs.fastlane.tools/actions
  end
end