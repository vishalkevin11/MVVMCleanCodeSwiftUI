# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
default_platform(:ios)
skip_docs

# iOS build - Fill below configuration input as per your project need and replace dummy inputs with actual one.
# For more information on build settings , see:
# https://docs.fastlane.tools/actions/build_app/#build_app
workspace = "MVVMCleanCodeSwiftUI.xcworkspace"

# The configuration to use when building the app. Defaults to 'Release'
clean_build = "false"

# Method used to export the archive. 
# Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id
export_method = "ad-hoc"

# Unit test case
test_scheme = "MVVMCleanCodeSwiftUITests"

# Project directory
project_directory = ENV["PWD"] + "/reports/"


desc "Runs all the Unit Tests"
lane :tests do
  # Publish Mac Notification
 # notification(subtitle: "Lane Executing Test Cases", message: "Test Cases!")
# Check if reports folder exists
# This step is optional - if you want to keep all reports like test cases, coverage, docs etc under a specific folder.
            sh(" if [ ! -d #{project_directory} ] 
            then
                mkdir #{project_directory}
            fi ")
# Run tests
     scan(scheme: test_scheme,
          only_testing: "MVVMCleanCodeSwiftUITests/",
          workspace: workspace,
          device: "iPhone 14",
          clean: false
        )
end

desc "Does a static analysis of the project. Configure the options in .swiftlint.yml"
lane :lint do
  puts "Linting..."
  swiftlint(
    mode: :lint,
    output_file: "reports/swiftlint.xml",
    reporter: "checkstyle",
    config_file: ".swiftlint.yml",
    ignore_exit_status: true
  )
end

