# name: Pull Request

# on:
#   pull_request:
#     branches:
#       - main
#   workflow_dispatch:

# # This is what will cancel the workflow
# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true
# jobs:
#   test:
#     runs-on: macos-latest
#     steps:
#       - uses: actions/checkout@v3

#       - name: Set up Node.js 14
#         uses: actions/setup-node@v3
#         with:
#           node-version: 14

#       - name: Install dependencies
#         run: npm install

#       - name: Install pod dependencies
#         run: |
#           cd MVVMCleanCodeSwiftUI && pod install

#       # - uses: maxim-lobanov/setup-xcode@v1
#       #   with:
#       #     xcode-version: latest-stable

#       - uses: ruby/setup-ruby@v1.143.0
#         with:
#           ruby-version: "3.0"
#       #     bundler-cache: true

#       # - name: Select Xcode
#       #   run: sudo xcode-select -switch /Applications/Xcode_14.2.app

#       # - name: Xcode Version
#       #   run: /usr/bin/xcodebuild -version

#       - name: Install Bundler
#         run: gem install bundler

#       - name: Install gems
#         run: bundle install

#       # - name: Install CocoaPods
#       #   run: bundle exec pod install

#       # - name: Install Dependencies
#       #   run: |
#       #     cd MVVMCleanCodeSwiftUI
#       #     pod install --repo-update
#       #   shell: bash
#       # - uses: ty0x2333/cocoapods-action@master
#       #   with:
#       #     additional_build_params: -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.2'
#       #     additional_lint_params: --private

#       # - name: Pod install
#       #   working-directory: ./MVVMCleanCodeSwiftUI
#       #   run: bundle exec pod install
#       # - name: Build and test
#       #   working-directory: ./MVVMCleanCodeSwiftUI
#       #   run: bundle exec fastlane tests
#       # - name: Swiftlint
#       #   working-directory: ./MVVMCleanCodeSwiftUI
#       #   run: bundle exec fastlane lint

#       # - name: Swift Packages Cache
#       #   uses: actions/cache@v2
#       #   id: cache
#       #   with:
#       #     path: |
#       #       Build/SourcePackages
#       #       Build/Build/Products
#       #     key: ${{ runner.os }}-deps-v1-${{ hashFiles('BILDsolid.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
#       #     restore-keys: ${{ runner.os }}-deps-v1-

#       #

#       # - name: Run tests
#       #   run: bundle exec fastlane tests

#       # - name: Run lint
#       #   run: bundle exec fastlane lint

#       - name: Run build and upload to directory
#         run: bundle exec fastlane build app_build_name:MVVMCleanCodeSwiftUI_Test_v1

name: Pull Request for build

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
  push:
    tags:
      - v*

# This is what will cancel the workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test:
    runs-on: macos-latest
    env:
      XC_VERSION: ${{ '14.2' }}
      XC_SCHEME: ${{ 'MVVMCleanCodeSwiftUIStaging' }}
      XC_CONFIGURATION: ${{ 'STAGING' }}
      XC_WORKSPACE: ${{ 'MVVMCleanCodeSwiftUI.xcworkspace' }}
      XC_ARCHIVE_PATH: ${{ './MVVMCleanCodeSwiftUI.xcarchive' }}
      XC_EXPORT_PATH: ${{ './artifacts/' }}
      XC_EXPORT_OPTIONS_FILE_PATH: ${{ './certs/ExportOptions.plist' }}
      ENCRYPTED_CERTS_FILE_PATH: ${{ './certs/NewsuncleCertificates.p12.gpg' }}
      DECRYPTED_CERTS_FILE_PATH: ${{ './certs/NewsuncleCertificates.p12' }}
      ENCRYPTED_PROVISION_FILE_PATH: ${{ './certs/provisioning.tar.gz.gpg' }}
      DECRYPTED_PROVISION_FILE_PATH: ${{ './certs/provisioning.tar.gz' }}
      CERTS_ENCRYPTION_PWD: ${{ secrets.CERTS_ENCRYPTION_PWD }}
      PROVISION_ENCRYPTION_PWD: ${{ secrets.PROVISION_ENCRYPTION_PWD }}
      CERTS_EXPORT_PWD: ${{ secrets.CERTS_EXPORT_PWD }}
      KEYCHAIN: ${{ 'test.keychain' }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js 14
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: Install pod dependencies
        run: |
          cd MVVMCleanCodeSwiftUI && pod install

      # - name: Install pod dependencies
      #   run: |
      #     cd MVVMCleanCodeSwiftUI && pod install
      #       # - uses: maxim-lobanov/setup-xcode@v1
      #       #   with:
      #       #     xcode-version: latest-stable

      - uses: ruby/setup-ruby@v1.143.0
        with:
          ruby-version: "3.0"
      #       #     bundler-cache: true

      #       # - name: Select Xcode
      #       #   run: sudo xcode-select -switch /Applications/Xcode_14.2.app

      #       # - name: Xcode Version
      #       #   run: /usr/bin/xcodebuild -version

      - name: Install Bundler
        run: gem install bundler

      - name: Install gems
        run: bundle install

      # - name: Install CocoaPods
      #   run: bundle exec pod install

      # - name: Install Dependencies
      #   run: |
      #     cd MVVMCleanCodeSwiftUI
      #     pod install --repo-update
      #   shell: bash
      # - uses: ty0x2333/cocoapods-action@master
      #   with:
      #     additional_build_params: -destination 'platform=iOS Simulator,name=iPhone 14,OS=16.2'
      #     additional_lint_params: --private

      # - name: Pod install
      #   working-directory: ./MVVMCleanCodeSwiftUI
      #   run: bundle exec pod install
      #       # - name: Build and test
      #       #   working-directory: ./MVVMCleanCodeSwiftUI
      #       #   run: bundle exec fastlane tests
      #       # - name: Swiftlint
      #       #   working-directory: ./MVVMCleanCodeSwiftUI
      #       #   run: bundle exec fastlane lint
      - name: Select latest Xcode
        run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"
      # - uses: actions/checkout@v2
      - name: Configure Keychain
        run: |
          security create-keychain -p "" "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings
          security list-keychains
      - name: Configure Code Signing
        run: |
          gpg -d -o "$DECRYPTED_CERTS_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERTS_ENCRYPTION_PWD" "$ENCRYPTED_CERTS_FILE_PATH"
          gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISION_ENCRYPTION_PWD" "$ENCRYPTED_PROVISION_FILE_PATH"
          security import "$DECRYPTED_CERTS_FILE_PATH" -k "$KEYCHAIN" -P "$CERTS_EXPORT_PWD" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
          tar xzvf $DECRYPTED_PROVISION_FILE_PATH
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          for PROVISION in `ls ./*.mobileprovision`
          do
            UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
            cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          done
      - name: Run tests
        run: bundle exec fastlane tests

      - name: Run lint
        run: bundle exec fastlane lint
      - name: Archive
        run: |
          mkdir -p artifacts
          /usr/bin/xcodebuild archive -workspace "$XC_WORKSPACE" -scheme "$XC_SCHEME" -configuration "$XC_CONFIGURATION" -archivePath "$XC_ARCHIVE_PATH" "OTHER_CODE_SIGN_FLAGS=--keychain '$KEYCHAIN'"
      - name: Export for App Store
        run: |
          /usr/bin/xcodebuild -exportArchive -archivePath "$XC_ARCHIVE_PATH" -exportOptionsPlist "$XC_EXPORT_OPTIONS_FILE_PATH" -exportPath "$XC_EXPORT_PATH"
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Artifacts
          path: ./artifacts/
